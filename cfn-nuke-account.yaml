AWSTemplateFormatVersion: 2010-09-09
Description: 
  This template creates a CodeBuild Project that runs aws-nuke on this account

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    -
      Label:
        default: "General"
      Parameters:
        - ScheduleExpression
        - NoDryRunEnabled
        - aws-nuke-version

Parameters:
  ScheduleExpression:
    Description: "Cron schedule expression. Reference: https://crontab.guru"
    Type: String
    Default: "cron(0 7 ? * 1-5 *)"
  NoDryRunEnabled:
    Description: "ENABLE/DISABLE No Dry Run (Careful!)"
    Type: String
    Default: "DISABLED"
    AllowedValues:
      - ENABLED
      - DISABLED
  aws-nuke-version:
    Description: "aws-nuke version. Ref: https://github.com/rebuy-de/aws-nuke/releases"
    Type: String
    Default: "v2.14.0"

Resources:
  NukeAccountCloudWatchScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub NukeAccountCloudWatchSchedule-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
         PolicyName: NukeAccountCloudWatchSchedulePolicy
         PolicyDocument:
           Version: 2012-10-17
           Statement:
              -
                Effect: Allow
                Action: codebuild:StartBuild
                Resource: !Sub ${NukeAccountNoDryRunProject.Arn}

  NukeAccountProjectRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: NukeAccountCodeBuildLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:NukeAccount-DryRun
                  - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:NukeAccount-DryRun:*
                  - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:NukeAccount-NoDryRun-CAREFUL
                  - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:NukeAccount-NoDryRun-CAREFUL:*
        -
         PolicyName: NukeAccountAssumeRolePolicy
         PolicyDocument:
           Version: 2012-10-17
           Statement:
              -
                Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub ${NukeAccountRole.Arn}

  NukeAccountRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: sts:AssumeRole
                
  NukeAccountNoDryRunProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: false
      Description: Builds a container to run AWS Nuke in this account
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "NukeAccount-NoDryRun-CAREFUL"
          Status: ENABLED
      Name: !Sub "NukeAccount-NoDryRun-CAREFUL"
      ServiceRole: !GetAtt NukeAccountProjectRole.Arn
      Source:
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get install jq
                - wget -q https://github.com/rebuy-de/aws-nuke/releases/download/${aws-nuke-version}/aws-nuke-${aws-nuke-version}-linux-amd64
                - mv aws-nuke-${aws-nuke-version}-linux-amd64 /bin/aws-nuke
                - chmod +x /bin/aws-nuke
            build:
              commands:
                - account_id=$(aws sts get-caller-identity --query Account --output text)
                - aws s3 cp s3://nukeaccount-$account_id/aws-nuke-config.yaml .
                - echo "Assuming Role for this account";
                - aws sts assume-role --role-arn ${NukeAccountRole.Arn} --role-session-name account-$account_id --query "Credentials" > $account_id.json;
                - cat $account_id.json
                - ACCESS_KEY_ID=$(cat $account_id.json |jq -r .AccessKeyId);
                - SECRET_ACCESS_KEY=$(cat $account_id.json |jq -r .SecretAccessKey);
                - SESSION_TOKEN=$(cat $account_id.json |jq -r .SessionToken);
                - sed -i -e "s/000000000000/$account_id/g" aws-nuke-config.yaml;
                - echo "Configured aws-nuke-config.yaml";
                - echo "Actually nuking this account";
                - # CAREFUL: This is using the flag --no-dry-run
                - aws-nuke --no-dry-run -c aws-nuke-config.yaml --force --access-key-id $ACCESS_KEY_ID --secret-access-key $SECRET_ACCESS_KEY --session-token $SESSION_TOKEN |tee -a aws-nuke.log;
                - nuke_pid=$!;
                - wait $nuke_pid;
                - echo "Account successfully actually nuked"
            post_build:
              commands:
                - cat aws-nuke.log
        Type: NO_SOURCE

  NukeAccountDryRunProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: false
      Description: Builds a container to run AWS Nuke in this account
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "NukeAccount-DryRun"
          Status: ENABLED
      Name: !Sub "NukeAccount-DryRun"
      ServiceRole: !GetAtt NukeAccountProjectRole.Arn
      Source:
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get install jq
                - wget -q https://github.com/rebuy-de/aws-nuke/releases/download/${aws-nuke-version}/aws-nuke-${aws-nuke-version}-linux-amd64
                - mv aws-nuke-${aws-nuke-version}-linux-amd64 /bin/aws-nuke
                - chmod +x /bin/aws-nuke
            build:
              commands:
                - account_id=$(aws sts get-caller-identity --query Account --output text)
                - aws s3 cp s3://nukeaccount-$account_id/aws-nuke-config.yaml .
                - echo "Assuming Role for this account";
                - aws sts assume-role --role-arn ${NukeAccountRole.Arn} --role-session-name account-$account_id --query "Credentials" > $account_id.json;
                - cat $account_id.json
                - ACCESS_KEY_ID=$(cat $account_id.json |jq -r .AccessKeyId);
                - SECRET_ACCESS_KEY=$(cat $account_id.json |jq -r .SecretAccessKey);
                - SESSION_TOKEN=$(cat $account_id.json |jq -r .SessionToken);
                - sed -i -e "s/000000000000/$account_id/g" aws-nuke-config.yaml;
                - echo "Configured aws-nuke-config.yaml";
                - echo "Pretending to nuke this account (i.e. this is a dry run)";
                - # TODO: Add --no-dry-run flag for Production
                - aws-nuke -c aws-nuke-config.yaml --force --access-key-id $ACCESS_KEY_ID --secret-access-key $SECRET_ACCESS_KEY --session-token $SESSION_TOKEN |tee -a aws-nuke.log;
                - nuke_pid=$!;
                - wait $nuke_pid;
                - echo "Account successfully pretended to be nuked"
            post_build:
              commands:
                - cat aws-nuke.log
        Type: NO_SOURCE

  NukeAccountCloudWatchSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub NukeAccountCloudWatchSchedule-${AWS::StackName}
      Description: CloudWatch scheduled event that runs AWS Nuke on this account
      ScheduleExpression: !Ref ScheduleExpression
      State:  !Ref NoDryRunEnabled
      RoleArn: !GetAtt NukeAccountCloudWatchScheduleRole.Arn
      Targets:
      -
        Arn: !GetAtt NukeAccountNoDryRunProject.Arn
        RoleArn: !GetAtt NukeAccountCloudWatchScheduleRole.Arn
        Id: NukeAccountId